<1> TrimValidityPeriodNode: Filter out rows where '_valid_from' >= 2024-01-02T00:00:00+00:00 or '_valid_to' <= 2024-01-01T00:00:00+00:00. If '_valid_from < 2024-01-01T00:00:00+00:00, set it to 2024-01-01T00:00:00+00:00. If '_valid_to > 2024-01-02T00:00:00+00:00 or '_valid_to' is null, set it to 2024-01-02T00:00:00+00:00.
└── <2> DeriveValidityPeriodNode: Derive the 'valid_from' and 'valid_to' columns for each feature value.
    └── <3> TakeLastRowNode: Take last row, partition by (('user_id', '_effective_timestamp')), order by (timestamp) descending
        └── <4> AddEffectiveTimestampNode: Add effective timestamp column '_effective_timestamp' that is equal to window('timestamp', batch_schedule).end where batch_schedule = 86400 seconds.
            └── <5> RenameColsNode: Drop columns ['_anchor_time'].
                └── <6> AddAnchorTimeNode: Add anchor time column '_anchor_time' to represent the materialization window. It is calculated as window('timestamp', batch_schedule).start where batch_schedule = 86400 seconds.
                    └── <7> StagingNode: Staging data for test_fv_3e7d4e8e
                        └── <8> FeatureTimeFilterNode: Apply time range filter [2010-02-01T00:00:00+00:00, 2024-01-02T00:00:00+00:00) to column 'timestamp'
                            └── <9> ConvertTimestampToUTCNode: Convert 'timestamp' to UTC
                                └── <10> FeatureViewPipelineNode(transactions_batch): Evaluate feature view pipeline 'test_fv' with feature time limits [2010-02-01T00:00:00+00:00, 2024-01-02T00:00:00+00:00)
                                    └── <11> [transactions_batch] StagingNode: Staging data for customers_04dfcb2f
                                        └── <12> DataSourceScanNode: Scan data source 'customers'. WARNING: there is no time range filter so all rows will be returned. This can be very inefficient.

